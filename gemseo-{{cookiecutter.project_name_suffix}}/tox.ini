[tox]
minversion = 3.20.0
# for using setuptools_scm
isolated_build = true

[testenv]
deps =
    -r requirements/test.txt
setenv =
    # workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory
    WINDIR = {env:WINDIR:C:\Windows}
    # use a non GUI rendering backend for matplotlib
    MPLBACKEND = AGG
    coverage: __COVERAGE_POSARGS=--cov-config setup.cfg --cov --cov-report=xml --cov-report=html
commands =
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
basepython = python3.9
deps = -r requirements/check.txt
skip_install = true
whitelist_externals =
    git
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:dist]
description = create and check the pypi distribution
basepython = python3.9
deps = -r requirements/dist.txt
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist build
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:doc]
description = build documentation
basepython = {[testenv:dev]basepython}
deps =
    {[testenv]deps}
    -r requirements/doc.txt
usedevelop = true
passenv =
    # required by matplotlib
    HOME
    # path to the directory that contains plantuml.jar
    PLANTUML_DIR
commands =
    sphinx-build -j auto docs . {posargs:-b html}

[testenv:doc-spell]
description = check doc spelling
envdir = {toxworkdir}/doc
basepython = {[testenv:doc]basepython}
usedevelop = {[testenv:doc]usedevelop}
deps = {[testenv:doc]deps}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling docs {toxinidir}/doc

[testenv:doc-linkchecker]
description = check links in the generated doc
basepython = python2.7
deps = linkchecker==9.4.0
skip_install = true
conda_deps =
conda_specs =
commands =
    linkchecker {toxinidir}/docs/build/html

[testenv:update-deps-{test,doc,dist,check}]
description = update the envs dependencies with pip-compile
basepython = python3.9
extras =
setenv =
passenv =
deps =
    test: {[testenv]deps}
    dist: {[testenv:dist]deps}
    check: {[testenv:check]deps}
    pip-tools
skip_install = true
commands =
    test: pip-compile -U requirements/test.in
    dist: pip-compile -U requirements/dist.in
    check: pip-compile -U requirements/check.in
    check: pre-commit autoupdate
